"==================================================================
" macOS
"
" Apple terminal specific issues with color
" require to set t_Co=16 for some color schemes
"
" Since in macOS the $TERM_PROGRAM env var is set
" we can customize by application, iterm also set
" a variable with the inicial profile name.
"==================================================================

"==================================================================
" VIMproved
set nocompatible
filetype plugin on
set modeline
set modelines=10

" Set utf8 as standard encoding and en_US as the standard language
scriptencoding utf-8
set encoding=utf8

" Use Unix as the standard file type
set fileformats=unix,dos,mac

" ======================= Plug Settings ===========================
" set the runtime path to include Vundle and initialize
call plug#begin()
" - - - Utilities - - -
  Plug 'editorconfig/editorconfig-vim'
  Plug 'junegunn/fzf',
  Plug 'junegunn/fzf.vim'
  Plug 'LunarWatcher/auto-pairs'
  Plug 'machakann/vim-sandwich'
  Plug 'nanotee/zoxide.vim'
  Plug 'preservim/nerdcommenter'
  Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  " - - - Syntax - - -
  " Plug 'elixir-editors/vim-elixir'
  " Plug 'elkasztano/nushell-syntax-vim'
  " Plug 'fatih/vim-go'
  " Plug 'hashivim/vim-terraform'
  Plug 'hashivim/vim-vagrant'
  " Plug 'leafgarland/typescript-vim'
  " Plug 'mattn/emmet-vim'
  " Plug 'pearofducks/ansible-vim'
  " Plug 'rescript-lang/vim-rescript'
  " Plug 'Tetralux/odin.vim'
  " Plug 'yasuhiroki/github-actions-yaml.vim'

  " - - - Colorschemes - - -
  Plug 'altercation/vim-colors-solarized'
  Plug 'catppuccin/vim', { 'as': 'catppuccin' }
  Plug 'cormacrelf/vim-colors-github'
  Plug 'crusoexia/vim-monokai'
  Plug 'ghifarit53/tokyonight-vim'
  Plug 'jacoborus/tender.vim'
  Plug 'joshdick/onedark.vim'
  Plug 'morhetz/gruvbox'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'rakr/vim-two-firewatch'
  Plug 'sonph/onehalf'
  Plug 'tyrannicaltoucan/vim-deep-space'

  " - - - Loaded last - - -
  Plug 'ryanoasis/vim-devicons'
" All of your Plugins must be added before the following line

call plug#end()            " required

" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
"
" Put your non-Plugin stuff after this line
" -------------------------------------------------------------------
" Plugins Settings
" -------------------------------------------------------------------
let NERDTreeIgnore = ['.git$[[dir]]']
let g:NERDTreeQuitOnOpen = 3
let g:NERDTreeWinPos = 'right'
let NERDTreeRespectWildIgnore = 1

" Format Terraform
" let g:terraform_fmt_on_save=1
" let g:terraform_align=1

" Ocaml
" set rtp^='/Users/oliver/.opam/default/share/ocp-indent/vim'

" ========================= General Settings ========================
" Sets how many lines of history VIM has to remember
set history=1000

" Set to auto read when a file is changed from the outside
set autoread

" -------------------------- Mappings -------------------------------
" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Look at vim config since we live here XD
nnoremap <silent> <leader>rc :view $MYVIMRC<cr>

" Fast saving
nnoremap <leader>w :w<cr>
nnoremap <silent> <leader>wa :wa<cr>
nnoremap <leader>x :x<cr>
nnoremap <silent> <leader>wx :xa<cr>

" Fast quit
nnoremap <leader>q :q!<cr>
nnoremap <silent> <leader>qa :qa!<cr>

" Nerdtree
nnoremap <silent> <Bslash> :NERDTreeToggle<CR>
nnoremap <silent> <leader>l :NERDTreeFind<cr>

" Fuzzy finder
let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-case --hidden'
map <silent> <C-p> :FZF!<cr>

" Fuzzy finder
nnoremap <silent> <leader>fz :FZ<cr>
nnoremap <silent> <leader>fa :Ag<cr>
nnoremap <silent> <leader>fr :RG<cr>
nnoremap <silent> <leader>ff :Files<cr>
nnoremap <silent> <leader>fb :Buffers<cr>
nnoremap <silent> <leader>fw :Windows<cr>
nnoremap <silent> <leader>fg :GitFiles?<cr>
nnoremap <silent> <leader>fl :Lines<cr>
nnoremap <silent> <leader>fs :BLines<cr>
nnoremap <silent> <leader>fc :Commits<cr>

" Search down for folders and tab-completition for all file related tasks
set path+=**

" ====== Open a shell (stays opened after session is closed) ========
if has("osx")
  nnoremap <silent> <leader>t :ter ++noclose<cr>
endif

" ========================= User interface ==========================
" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=7

" ========================= WildOptions ==============================
" Turn on the WiLd menu
set wildmode=list:longest
" enable ctrl-n and ctrl-p to scroll thru matches
set wildmenu

" stuff to ignore when tab completing
set wildignore=*.o,*.obj,*~,*.pyc
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=node_modules/**
set wildignore+=bower_components/**
set wildignore+=vendor/rails/**
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=__pycache__
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe,*.pdb  " Windows

"Always show current position
set ruler
" Height of the command bar
set cmdheight=2
" A buffer becomes hidden when it is abandoned
set hidden
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch
" Don't redraw while executing macros (good performance config)
set lazyredraw
" For regular expressions turn magic on
set magic
" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Scrolling
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Show status line
set laststatus=2

" ========================= Font & Color's ===========================
" Enable syntax highlighting
syntax enable

" Absolute number on view mode relative on insert mode
augroup numbertoggle
  " This is activated after 'set number'
  autocmd!
  autocmd BufEnter,FocusLost,InsertEnter,WinLeave   * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusGained,InsertLeave,WinEnter * if &nu                  | set nornu | endif
augroup END

" Set more space on the left
set nonumber     " Avoid gutter clutter if not necessary
set foldcolumn=4 "max 12
set wrapmargin=4
highlight! link FoldColumn Normal

" Line number column transparent on colorscheme change its overriden
highlight clear LineNr
" Highlight current line
set cursorline

" Set options only for GUI
if has("gui_running")
  set background=light
  colorscheme tokyonight

  let g:airline_theme = 'tomorrow'
  set lines=40 columns=110
  set gfn=Hack\ Nerd\ Font\ Mono:h16

  set guioptions-=r " Hide rigth scrollbar
  set guioptions-=L " Hide left scrollbar
  set guioptions-=e " Set gui-tabs as terminal
  set guitablabel=%M\ %t
endif

" RUNNING ON A TERMINAL
if ! has("gui_running")
  " Enable yanked to system clipboard
  set clipboard=unnamed
  set mouse=a
  set termguicolors

  "--------------------------------------------------------
  " Set colorscheme based on TERM_PROGRAM
  "--------------------------------------------------------

  " MacOS Terminal
  if match($TERM_PROGRAM,'\cApple_Terminal') != -1
    set notermguicolors
    set t_Co=256
    set background=dark
    if !empty($VIM_COLOR)
      colorscheme $VIM_COLOR
    else
      colorscheme onedark
    endif

  " iTerm
  elseif match($TERM_PROGRAM,'\ciTerm') != -1
    if match($ITERM_PROFILE,'\cCatpuccino') != -1
        colorscheme catppuccin_macchiato
        let g:airline_theme = 'catppuccin_macchiato'
        highlight Normal ctermbg=none
    elseif match($ITERM_PROFILE,'\cTokyonight') != -1
        let g:tokyonight_style = 'night' " available: night, storm
        let g:tokyonight_enable_italic = 1
        colorscheme tokyonight
    elseif match($ITERM_PROFILE,'\cMonokai') != -1
        colorscheme monokai
    elseif match($ITERM_PROFILE,'\cDark') != -1
        colorscheme PaperColor
        let g:airline_theme = 'minimalist'
    elseif match($ITERM_PROFILE,'\cLight') != -1
        set notermguicolors
        set background=light
        colorscheme Solarized
    else
        set background=light
        colorscheme quiet
    endif

  " WezTerm
  elseif match($TERM_PROGRAM,'\cWezterm') != -1
    set background=dark
    color tender
    let g:airline_theme = 'tenderplus'

  " Rio
  elseif match($TERM_PROGRAM,'\cRio') != -1
    set background=dark
    color onedark
    let g:airline_theme = 'biogoo'

  " Tmux
  elseif match($TERM_PROGRAM,'\cTmux') != -1
    set background=dark
    color onedark
    let g:airline_theme = 'zenburn'

  else
    set background=dark
    color quiet
    " Set Tab bar color background to translucid and line to black
    highlight TabLineFill ctermfg=Black
  endif

  " Override all and set color dynamically
  if !empty($VIM_COLOR)
    colorscheme $VIM_COLOR
  endif

  " --
  highlight SpecialKey guibg=bg ctermbg=none

  " Spelling mistakes will be colored up red.
  hi SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
  hi SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
  hi SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
  hi SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f
endif

" Airline settings
let g:airline_powerline_fonts = 1
" Airline customization
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Set Gutter column translucid - only work at start
highlight clear FoldColumn
highlight clear Folded
highlight clear SignColumn

" Colorize right extra white tab or space chars
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
" Display tabs and trailing spaces visually
set list listchars=tab:\|\ ,trail:·

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => File backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Persistent Undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keep undo history across sessions, by storing in file.
"silent !mkdir -p ~/vimfiles/{undodir,autoload} > /dev/null 2>&1
set undodir=~/.config/vim/undodir
set undofile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab
" Be smart when using tabs ;)
set smarttab
" 1 tab 4 spaces for auto-identation and <<>> ==
set shiftwidth=4
" width of the TAB character
set tabstop=4

if has('autocmd')
  autocmd FileType gitcommit setlocal spell
  autocmd Filetype c,cpp set noexpandtab sw=4 ts=4 cinoptions+=L0
  autocmd Filetype python,ruby,php set expandtab sw=4 ts=4
  autocmd Filetype json,javascript,typescript,html set expandtab sw=2 ts=2
  autocmd Filetype markdown set expandtab sw=2 ts=2 wrap
  autocmd Filetype yaml set expandtab sw=2 ts=2 sts=2 wrap

  " Shell files Indent with tabs, align with spaces
  autocmd FileType sh,bash set noet ci pi sts=0 sw=4 ts=4

  " Go files Indent with tabs, align with spaces
  autocmd FileType go set noet ci pi sts=0 sw=4 ts=4

  " XML files Indent with tabs, align with spaces
  autocmd FileType xml set noet ci pi sts=0 sw=2 ts=2

  " Remove all whitespace at buffer saving
  autocmd BufWrite * :call DeleteTrailingWS()

  " Return to last edit position when opening files
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  " But don't remember the cursor position in git commits
  au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
endif

" Templates for new buffers
if has('autocmd')
  augroup templates
    autocmd BufNewFile *.sh 0 read <sfile>:h/skeletons/bash.sh
    autocmd BufNewFile *.py 0 read <sfile>:h/skeletons/python.py
  augroup END
endif

" Linebreak on 500 characters
set linebreak
set textwidth=500

set autoindent "Auto indent
set smartindent "Smart indent
set nowrap "Wrap lines

" Folds
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Toggle line numbers on/off
map <silent><leader>n :set number!<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Quick open blank/new buffers
map <leader>bh :enew<cr>
map <leader>bv :vnew<cr>
map <leader>bt :tabnew<cr>
" Close the current buffer
map <silent><leader>bd :bdel<cr>
" Close all the buffers
map <silent><leader>ba :%bdelete<cr>
" Move between bufferrs
map <silent><leader>bn :bnext<cr>
map <silent><leader>bp :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
" Opens a new tab with the current buffer's relative path
map <leader>te :tabedit <c-r>=expand("%:~:.:h")<cr>/
" Shift+ arrow -> <-
nnoremap <S-RIGHT> :tabnext<cr>
nnoremap <S-LEFT> :tabprevious<cr>

" Splits prefer to the right and below
set splitright
set splitbelow
" Open a vertical split with the current buffer's relative path
map <leader>sv :vsplit <c-r>=expand("%:~:.:h")<cr>/
" Open a horizontal split with the current buffer's relative path
map <leader>sh :split <c-r>=expand("%:~:.:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
  " nothing for the moment
endtry

" Remember info about open buffers on close
set viminfo^=%

" ================ Custom Mappings ==================
" Additional way to go to toggle from insert and nomal mode
" Works on terminal and GUI in windows, in macos only with GUI
imap <S-Space> <Esc>
nmap <S-Space> i

" Insert date time pressing <f7> key
:nnoremap <F7> "=strftime("%c")<cr>P
:inoremap <F7> <C-R>=strftime("%c")<cr>

" Clear search higlight pressing enter same as :noh
:nnoremap <silent> <CR> :nohlsearch<cr><cr>

" Move a line of text using SHIFT+[jk]
nnoremap <S-Up> :m-2<cr>
nnoremap <S-Down> :m+<cr>
inoremap <S-Up> <Esc>:m-2<cr>
inoremap <S-Down> <Esc>:m+<cr>

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing <leader>sl will toggle and turn toggle spell checking
map <leader>sl :setlocal spell!<cr>
" Move between errors
map <leader>sn ]s
map <leader>sp [s
" Add word to dictionary
map <leader>sa zg
" Suggest correction
map <leader>ss z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <leader>rw mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" ================ Helper Functions ==================
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

" vim: set ft=vim ts=2 sw=2 et :
